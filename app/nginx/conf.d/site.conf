server {
  listen 80;
  server_name auth.kavalek.fr api.kavalek.fr;

  # Let’s Encrypt http-01
  location /.well-known/acme-challenge/ {
    root /var/www/certbot;
  }

  # -------- Auth service (conserver le préfixe /auth) --------
  location /auth/ {
    # IMPORTANT: pas de rewrite -> on conserve /auth/*
    proxy_pass http://auth:3000;  # pas de slash final => le chemin /auth/... est préservé
    proxy_http_version 1.1;

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }

  # -------- Messaging REST (conserver /api) --------
  location /api/ {
    # IMPORTANT: pas de rewrite -> on conserve /api/*
    proxy_pass http://messaging:3001;  # pas de slash final
    proxy_http_version 1.1;

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }

  # -------- Messaging WebSocket (path == '/socket') --------
  location /socket {
    proxy_pass http://messaging:3001;  # notre serveur Socket.IO écoute sur /socket
    proxy_http_version 1.1;

    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;

    # (optionnel mais utile en prod WS)
    proxy_read_timeout 60s;
    proxy_send_timeout 60s;
  }

  location /test {
    return 200 "NGINX is working\n";
  }
}
