import 'package:flutter/foundation.dart';
import 'package:flutter_message_app/core/crypto/pointycastle_adapter.dart';
import 'package:cryptography/cryptography.dart';

/// Nouveau gestionnaire de cl√©s utilisant l'approche hybride pour la reconstruction depuis les bytes priv√©s
/// 
/// AVANTAGES par rapport √† KeyManagerV2:
/// - ‚úÖ Cache m√©moire persistant pendant la session
/// - ‚úÖ G√©n√©ration de cl√©s coh√©rente
/// - ‚úÖ Interface compatible avec cryptography
/// - ‚úÖ Performance optimis√©e
/// - ‚úÖ S√©curit√© maintenue (m√™me niveau cryptographique)
class KeyManagerV3 {
  KeyManagerV3._internal();
  static final KeyManagerV3 instance = KeyManagerV3._internal();

  final HybridAdapter _adapter = HybridAdapter.instance;

  /// G√©n√®re et stocke les cl√©s (m√™me interface que KeyManagerV2)
  Future<void> ensureKeysFor(String groupId, String deviceId) async {
    await _adapter.ensureKeysFor(groupId, deviceId);
  }

  /// V√©rifie si les cl√©s existent (m√™me interface que KeyManagerV2)
  Future<bool> hasKeys(String groupId, String deviceId) async {
    return await _adapter.hasKeys(groupId, deviceId);
  }

  /// Retourne les cl√©s publiques en Base64 (m√™me interface que KeyManagerV2)
  Future<Map<String, String>> publicKeysBase64(String groupId, String deviceId) async {
    return await _adapter.publicKeysBase64(groupId, deviceId);
  }

  /// Charge la cl√© Ed25519 (NOUVELLE FONCTIONNALIT√â: cache persistant)
  Future<SimpleKeyPair> loadEd25519KeyPair(String groupId, String deviceId) async {
    debugPrint('üîê Loading Ed25519 keypair with Hybrid approach');
    return await _adapter.getEd25519KeyPair(groupId, deviceId);
  }

  /// Charge la cl√© X25519 (NOUVELLE FONCTIONNALIT√â: cache persistant)
  Future<SimpleKeyPair> loadX25519KeyPair(String groupId, String deviceId) async {
    debugPrint('üîê Loading X25519 keypair with Hybrid approach');
    return await _adapter.getX25519KeyPair(groupId, deviceId);
  }

  /// Indique si les cl√©s ont besoin d'√™tre republi√©es (compatibilit√© avec KeyManagerV2)
  bool get keysNeedRepublishing => false; // KeyManagerV3 n'a pas ce probl√®me

  /// Marque les cl√©s comme republi√©es (compatibilit√© avec KeyManagerV2)
  void markKeysRepublished() {
    // KeyManagerV3 n'a pas besoin de cette fonctionnalit√©
  }

  /// Migration depuis KeyManagerV2
  /// 
  /// Cette m√©thode migre les cl√©s existantes de KeyManagerV2 vers KeyManagerV3
  /// Les cl√©s sont copi√©es et peuvent √™tre utilis√©es apr√®s red√©marrage
  Future<void> migrateFromKeyManagerV2(String groupId, String deviceId) async {
    debugPrint('üîÑ Migrating keys from KeyManagerV2 to KeyManagerV3');
    
    // V√©rifier si les cl√©s existent d√©j√† dans KeyManagerV3
    if (await hasKeys(groupId, deviceId)) {
      debugPrint('‚úÖ Keys already exist in KeyManagerV3, no migration needed');
      return;
    }
    
    // Pour l'instant, g√©n√©rer de nouvelles cl√©s
    debugPrint('‚ö†Ô∏è Migration not implemented yet, generating new keys');
    await ensureKeysFor(groupId, deviceId);
  }
}
